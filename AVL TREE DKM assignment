//SUDIN JANA
//ROLL NO-64





#include<iostream>
#include<bits/stdc++.h>
using namespace std;
/*create a tree*/

struct AVL_TREE{
    int data;
    struct AVL_TREE *left;
    struct AVL_TREE *right;
};

/*Function for count the height of a avl tree*/

int height(AVL_TREE *t)
{
    int result=0;
    if(t!=NULL)
    {
        int left_side_height=height(t->left);
        int right_side_height=height(t->right);
        int maximum_height=max(left_side_height,right_side_height);
        result=maximum_height+1;
    }
    return result;
}

/*Function for measure the balance factor of each node of the AVL tree*/

int balance_factor(AVL_TREE *t)
{
    int left_side_height=height(t->left);
    
    
    int right_side_height=height(t->right);
    
    int result=left_side_height-right_side_height;
    
    return result;
}

/*Function for left left rotation*/

AVL_TREE* left_left_rotation(AVL_TREE *t)
{
    AVL_TREE *p;
    
    p=t->left;                                        
    
    t->left=p->right;
    
    p->right=t;
    
    return p;
}

/*Function for right right rotation*/


AVL_TREE* right_right_rotation(AVL_TREE *t)
{
    AVL_TREE *right_tree;
    
    right_tree=t->right;
    
    t->right=right_tree->left;
    
    right_tree->left=t;
    
    return right_tree;
}


/*Function for left right rotation*/


AVL_TREE* left_right_rotation(AVL_TREE *t)
{
    AVL_TREE *left_tree;
    
    left_tree=t->left;
    
    t->left=right_right_rotation(left_tree);
    
    left_tree=left_left_rotation(t);
    
    return left_tree;
}


/*Function for right left rotation*/


AVL_TREE* right_left_rotation(AVL_TREE *t)
{
    AVL_TREE *right_tree;
    
    right_tree=t->right;
    
    t->right=left_left_rotation(right_tree);
    
    right_tree=right_right_rotation(t);
    
    return right_tree;
}


/*Function for balance a AVL tree*/

AVL_TREE* balance(AVL_TREE *t)
{
    int B=balance_factor(t);
    
    if(B>1)
    {
        if(balance_factor(t->left)>0)
        {
            t=left_left_rotation(t);
        }
        else
        {
            t=left_right_rotation(t);
        }
    }
    else if(B<-1)
    {
        if(balance_factor(t->right)>0)
        {
            t=right_left_rotation(t);
        }
        else
        {
            t=right_right_rotation(t);
        }
    }
    
    return t;
}



AVL_TREE *FindMin(AVL_TREE *root)
{
    while(root->left!=NULL)
    root=root->left;
    return root;
}

AVL_TREE *Delete(AVL_TREE *root,int data)
{
    if(root==NULL)
    return root;
    else if(data<root->data)
    root->left=Delete(root->left,data);
    else if(data>root->data)
    root->right=Delete(root->right,data);
    else
    {
        if(root->left==NULL && root->right==NULL)
        {
        delete root;
        root=NULL;
        }
        else if(root->left==NULL)
        {
            AVL_TREE *temp=root;
            root=root->right;
            delete temp;
            root=balance(root);
        }
        else if(root->right==NULL)
        {
            AVL_TREE *temp=root;
            root=root->left;
            delete temp;
            root=balance(root);
        }
        else
        {
            AVL_TREE *temp=FindMin(root->right);
            root->data=temp->data;
            root->right=Delete(root->right,temp->data);
        }
    }
    return root;
}


/*Function for insert a node in AVL tree*/

AVL_TREE* insert(AVL_TREE *t,int key)
{
    if(t==NULL)
    {
        t=(struct AVL_TREE*)malloc(sizeof(struct AVL_TREE));
        
        t->data=key;
        
        t->left=NULL;
        
        t->right=NULL;
        
        return  t;
    }
    else if(key<=t->data)
    {
        t->left=insert(t->left,key);
        t=balance(t);
    }
    else
    {
        t->right=insert(t->right,key);
        t=balance(t);
    }
    
    return t;
}

/*Function for preorder print*/

void preorder(AVL_TREE *t)
{
    if(t==NULL)
    return;
    
    cout<<t->data<<" ";
    
    preorder(t->left);
    
    preorder(t->right);
}


//driver code


int main()
{
    
    struct AVL_TREE *root=NULL;
    
    int c,a;
    
    while(1)
    {
        cout<<"1 for insert function:"<<"\n";
        cout<<"2 for delete function"<<"\n";
        cout<<"3 for height "<<"\n";
        cout<<"4 for balance_factor of root:"<<"\n";
        cout<<"5 for preorder traversal:"<<"\n";
        cout<<"6 for exit:"<<"\n";
        cout<<"eneter the choice:"<<"\n";
        cin>>c;
        switch(c)
        {
            case 1:
            cout<<"Enter the number to be insert:"<<"\n";
            cin>>a;
            root=insert(root,a);
            break;
            case 2:
            cout<<"Enter thew number to be deleted:"<<"\n";
            cin>>a;
            root=Delete(root,a);
            break;
            case 3:
            cout<<"The height of the avl tree is:"<<(height(root)-1)<<"\n";
            break;
            case 4:
            cout<<"The balance factor of root is:"<<balance_factor(root)<<"\n";
            break;
            case 5:
            cout<<"The preorder traversal of root is:"<<"\n";
            preorder(root);
            break;
            case 6:
            exit(0);
        }
    }
}
